@model dynamic

@{
    ViewBag.Title = "New Rental";
}

<h2 class="text-center text-primary">New Rental</h2>

<div class="row">
    <div class="col-xs-10 col-xs-offset-1 col-sm-6 col-sm-offset-3 col-md-4 col-md-offset-4">
        <div class="well">
            <form id="newRental">
                <div class="form-group">
                    <label for="customer">Customer</label>
                    <input id="customer" name="customer" data-rule-validCustomer="true" type="text" value="" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="movie">Movies</label>
                    <input id="movie" name="movie" data-rule-validMovie="true" type="text" value="" class="form-control" />
                </div>
                <ul id="movies" class="list-group"></ul>
                <button class="btn btn-primary btn-block"><i class="fa fa-floppy-o" aria-hidden="true"></i> Save</button>
            </form>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            // The client view model, which will be sent to server.
            var vm = {
                moviesIds: []
            };

            // Grab an instance of Bloodhound suggesions engine, after setting its configurations.
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            // Hook typeahead to form input, and set its configurations.
            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'customers',
                display: 'name',
                source: customers
            }).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
            });

            var movies = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/movies?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#movie').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'movies',
                display: 'name',
                source: movies
            }).on("typeahead:select", function (e, movie) {
                $("#movies").append("<li class='list-group-item'>" + movie.name + "</li>");
                $("#movie").typeahead("val", "");
                vm.moviesIds.push(movie.id);
            });

            $.validator.addMethod("validCustomer",
                function () {
                    return vm.customerId && vm.customerId !== 0;
                }, "Please select valid customer.");

            $.validator.addMethod("validMovie",
                function () {
                    return vm.moviesIds.length > 0;
                }, "Please select at least one movie.");

            var validator = $("#newRental").validate({
                rules: {
                    customer: "required"
                },
                messages: {
                    customer: "Customer is required."
                },
                submitHandler: function () {
                    $.ajax({
                        url: "/api/newrentals",
                        method: "POST",
                        data: vm
                    }).done(function () {
                        // Display success toastr message.
                        toastr.success("Rentals successfully recorded.");

                        // Reset form values.
                        $("#customer").typeahead("val", "");
                        $("#movies").empty();

                        // Re-instantiate view model.
                        vm = { moviesIds: [] };

                        // Reset the controlled form.
                        validator.resetForm();
                    }).fail(function () {
                        // Display an error toastr message.
                        toastr.error("Something unexpected happened!");
                    });

                    // Prevent the form from normal submitting.
                    return false;
                }
            });
        });
    </script>
}
